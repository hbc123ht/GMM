from sklearn.mixture import GaussianMixture as GMMI
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import scipy.io as sci
import scipy as sp
import seaborn as sns

class GMM(object):
    def __init__(self, X, k=1):
        # dimension
        X = np.asarray(X)
        self.m, self.n = X.shape
        self.data = X.copy()
        # number of mixtures
        self.k = k
        self.re = np.zeros(self.m)

    def _init(self):
        # init mixture means/sigmas
        self.mean_arr = np.matrix(np.random.random((self.k,self.n)))
        self.sigma_arr = np.array([np.asmatrix(np.identity(self.n)) for i in range(self.k)])
        self.phi = np.ones(self.k) / self.k
        self.w = np.asmatrix(np.empty((self.m, self.k), dtype=float))

    def fit(self, tol=1e-4):
        self._init()
        num_iters = 0
        ll = 1
        previous_ll = 0
        while (ll - previous_ll > tol):
            previous_ll = self.loglikelihood()
            self._fit()
            num_iters += 1
            ll = self.loglikelihood()
           # print('Iteration %d: log-likelihood is %.6f' % (num_iters, ll))
        #print('Terminate at %d-th iteration:log-likelihood is %.6f' % (num_iters, ll))

    def loglikelihood(self):
        ll = 0
        for i in range(self.m):
            tmp = 0
            for j in range(self.k):
                # print(self.sigma_arr[j])
                tmp += sp.stats.multivariate_normal.pdf(self.data[i, :],self.mean_arr[j, :].A1, self.sigma_arr[j, :], self.phi[j])
            ll += np.log(tmp)
        return ll

    def _fit(self):
        self.e_step()
        self.m_step()

    def e_step(self):
        # calculate w_j^{(i)}
        for i in range(self.m):
            den = 0
            for j in range(self.k):
                num = sp.stats.multivariate_normal.pdf(self.data[i, :],
                                                       self.mean_arr[j].A1,
                                                       self.sigma_arr[j] ,self.phi[j])
                den += num
                self.w[i, j] = num
            self.w[i, :] /= den
            assert self.w[i, :].sum() - 1 < 1e-4

    def m_step(self):
        for j in range(self.k):
            const = self.w[:, j].sum()
            self.phi[j] = 1 / self.m * const
            _mu_j = np.zeros(self.n)
            _sigma_j = np.zeros((self.n, self.n))
            for i in range(self.m):
                _mu_j += (self.data[i, :] * self.w[i, j])
                _sigma_j += self.w[i, j] * (
                            (self.data[i, :] - self.mean_arr[j, :]).T * (self.data[i, :] - self.mean_arr[j, :]))
                # print((self.data[i, :] - self.mean_arr[j, :]).T * (self.data[i, :] - self.mean_arr[j, :]))
            self.mean_arr[j] = _mu_j / const
            self.sigma_arr[j] = _sigma_j / const
        # print(self.sigma_arr)
    def classi(self):
        for i in range(self.m):
            ma = 0
            la = 0
            for j in range(self.k):
                if (ma < self.w[i,j]):
                    ma = self.w[i,j]
                    la = j
            #print(i)
            self.re[i] = la
        return self.re
    def prob(self):
        val = []
        for i in range(self.m):
            val.append((i,sp.stats.multivariate_normal.pdf(self.data[i, :],
                                                       self.mean_arr[0].A1,
                                                       self.sigma_arr[0] ,self.phi[0])))
        return val
    def count(self, c):
        cou = 0
        for i in range(self.m):
            if (self.re[i] == c):
                cou += 1
        return cou

data = sci.loadmat('cardio.mat')
X = data['X']
gmm = GMM(X)
datay = data['y']
c = 0
d= []
print("The actual outlier points of dataset is : ")
for i in range(datay.shape[0]):
    if (datay[i] == 1):
        c = c + 1
        d.append(i)
print(d)

gmm.fit()
labels = gmm.prob()
labels.sort(key = lambda x : x[1])
result = []
for i in range(176):
    result.append(labels[i][0])
result.sort()
print("the predicted outlier points is :")
print(result)
r = 0
for i in result:
    if (i >= 1655):
        r += 1
print("There are ", r, " correct outlier points predicted out of all 176 outlier points")
#print(labels)

#plt.scatter(X[:, 0], X[:, 1], c=labels, s=40, cmap='viridis');
#plt.show()
